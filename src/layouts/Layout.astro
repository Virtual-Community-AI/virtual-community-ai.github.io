---
import '../styles/global.css';

export interface Props {
	title?: string;
}

const { title = "Virtual Community - Multi-Agent Embodied AI Simulation" } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<meta name="description" content="Virtual Community: An open-world simulation platform for embodied multi-agent research with scalable 3D environments and scene-grounded agent communities." />
		<title>{title}</title>
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
	</head>
	<body class="font-sans antialiased bg-gray-50 text-slate-900">
		<slot />
		
		<script>
			// Global scroll animation functionality
			const observerOptions = {
				threshold: 0.1,
				rootMargin: '0px 0px -50px 0px'
			}

			const observer = new IntersectionObserver((entries) => {
				entries.forEach((entry) => {
					if (entry.isIntersecting) {
						entry.target.classList.add('animate')
					}
				})
			}, observerOptions)

			// Initialize animations when DOM is loaded
			document.addEventListener('DOMContentLoaded', () => {
				const animatedElements = document.querySelectorAll('.fade-in-up, .slide-in-left, .slide-in-right, .stagger-children')
				animatedElements.forEach((el) => observer.observe(el))
			})
		</script>
	</body>
</html>

<style is:global>
	html {
		font-family: 'Inter', system-ui, sans-serif;
	}
	
	* {
		box-sizing: border-box;
	}

	/* Global Scroll Animation Styles */
	.fade-in-up {
		opacity: 0;
		transform: translateY(30px);
		transition: opacity 0.6s ease-out, transform 0.6s ease-out;
	}

	.fade-in-up.animate {
		opacity: 1;
		transform: translateY(0);
	}

	.slide-in-left {
		opacity: 0;
		transform: translateX(-30px);
		transition: opacity 0.6s ease-out, transform 0.6s ease-out;
	}

	.slide-in-left.animate {
		opacity: 1;
		transform: translateX(0);
	}

	.slide-in-right {
		opacity: 0;
		transform: translateX(30px);
		transition: opacity 0.6s ease-out, transform 0.6s ease-out;
	}

	.slide-in-right.animate {
		opacity: 1;
		transform: translateX(0);
	}

	.stagger-children > * {
		opacity: 0;
		transform: translateY(20px);
		transition: opacity 0.5s ease-out, transform 0.5s ease-out;
	}

	.stagger-children.animate > * {
		opacity: 1;
		transform: translateY(0);
	}

	.stagger-children.animate > *:nth-child(1) { transition-delay: 0.1s; }
	.stagger-children.animate > *:nth-child(2) { transition-delay: 0.2s; }
	.stagger-children.animate > *:nth-child(3) { transition-delay: 0.3s; }
	.stagger-children.animate > *:nth-child(4) { transition-delay: 0.4s; }
	.stagger-children.animate > *:nth-child(5) { transition-delay: 0.5s; }
	.stagger-children.animate > *:nth-child(6) { transition-delay: 0.6s; }
	.stagger-children.animate > *:nth-child(7) { transition-delay: 0.7s; }
	.stagger-children.animate > *:nth-child(8) { transition-delay: 0.8s; }
	.stagger-children.animate > *:nth-child(9) { transition-delay: 0.9s; }
	.stagger-children.animate > *:nth-child(10) { transition-delay: 1s; }
	.stagger-children.animate > *:nth-child(11) { transition-delay: 1.1s; }
	.stagger-children.animate > *:nth-child(12) { transition-delay: 1.2s; }
	.stagger-children.animate > *:nth-child(13) { transition-delay: 1.3s; }
	.stagger-children.animate > *:nth-child(14) { transition-delay: 1.4s; }
	.stagger-children.animate > *:nth-child(15) { transition-delay: 1.5s; }
	.stagger-children.animate > *:nth-child(16) { transition-delay: 1.6s; }

	/* Hero animations on page load */
	.hero-animate {
		opacity: 0;
		transform: translateY(20px);
		animation: heroFadeIn 1s ease-out 0.3s forwards;
	}

	.hero-animate-delay {
		opacity: 0;
		transform: translateY(20px);
		animation: heroFadeIn 1s ease-out 0.6s forwards;
	}

	@keyframes heroFadeIn {
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}
</style>
